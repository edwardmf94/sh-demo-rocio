# -*- coding: utf-8 -*-
from odoo import models, fields, api, _
from odoo.exceptions import UserError

import datetime

class SaleCoupon(models.Model):
	_inherit = 'sale.coupon'

	pos_order_id = fields.Many2one('pos.order',string='POS Order using it')

	@api.model
	def pos_check_validity(self,code):
		coupon = self.search([('code','=',code)])
		if len(coupon) == 0:
			return {
				'validity': False,
				'message': 'Coupon not found.'
			}

		validity = True
		message = ''
		i = datetime.date.today()
		if coupon.state in ('used', 'expired') or \
		   (coupon.expiration_date and coupon.expiration_date < i):
			message = _('This coupon %s has been used or is expired.') % (coupon.code)
			validity = False
		elif coupon.state == 'reserved':
			message = _('This coupon %s exists but the origin sales order is not validated yet.') % (coupon.code)
			validity = False
		# Minimum requirement should not be checked if the coupon got generated by a promotion program (the requirement should have only be checked to generate the coupon)
		#elif coupon.program_id.program_type == 'coupon_program' and not coupon.program_id._filter_on_mimimum_amount(order):
		#	message = _('A minimum of %s %s should be purchased to get the reward') % (coupon.program_id.rule_minimum_amount, coupon.program_id.currency_id.name)
		#	validity = False
		elif not coupon.program_id.active:
			message = _('The coupon program for %s is in draft or closed state') % (coupon.code)
			validity = False
		#elif coupon.partner_id and coupon.partner_id != order.partner_id:
		#	message = _('Invalid partner.')
		#	validity = False
		#elif coupon.program_id in order.applied_coupon_ids.mapped('program_id'):
		#	message = _('A Coupon is already applied for the same reward')
		#	validity = False
		#elif coupon.program_id._is_global_discount_program() and order._is_global_discount_already_applied():
		#	message = _('Global discounts are not cumulable.')
		#	validity = False
		#elif coupon.program_id.reward_type == 'product' and not order._is_reward_in_order_lines(coupon.program_id):
		#	message = _('The reward products should be in the sales order lines to apply the discount.')
		#	validity = False
		#elif not coupon.program_id._is_valid_partner(order.partner_id):
		#	message = _("The customer doesn't have access to this reward.")
		#	validity = False
		# Product requirement should not be checked if the coupon got generated by a promotion program (the requirement should have only be checked to generate the coupon)
		#elif coupon.program_id.program_type == 'coupon_program' and not coupon.program_id._filter_programs_on_products(order):
		#	message = _("You don't have the required product quantities on your sales order. All the products should be recorded on the sales order. (Example: You need to have 3 T-shirts on your sales order if the promotion is 'Buy 2, Get 1 Free').")
		#	validity = False
		
		return {
			'validity': validity,
			'message': message,
			'program_id': coupon.program_id.id,
			'coupon_id': coupon.id
		}